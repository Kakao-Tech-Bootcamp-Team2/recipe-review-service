name: Commit Stage
on: push

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: kakao-tech-bootcamp-team2/recipe-review-service

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Build, unit tests and integration tests
        run: |
          chmod +x gradlew 
          ./gradlew build
      - name: Code vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan
        with:
          path: "${{ github.workspace }}"
          fail-build: false
          severity-cutoff: high
          acs-report-enable: true
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
#      - name: Setup tools # 쿠버네티스 매니페스트 파일 검증을 위한 사전작업
#        uses: alexellis/setup-arkade@v3
#      - name: Install tools
#        uses: alexellis/arkade-get@master # Arkade를 사용하여 지정된 도구를 설치
#        with:
#          kubeconform: latest # kubeconform은 k8s 매니페스트 유효성을 검사하는 도구
#      - name: Validate Kubernetes manifests
#        run: |
#          kubeconform --strict k8s
  package:
    name: Package and Publish
    if: ${{ github.ref == 'refs/heads/deploy' }}
    needs: [ build ]
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      # 버전 관리 스텝
      - name: Get Version
        id: get_version
        run: |
          VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/packages/container/recipe-review-service/versions | jq '.[0].metadata.container.tags[0]' -r)
          if [ "$VERSION" = "null" ] || [ -z "$VERSION" ]; then
            echo "version=0.0.1" >> $GITHUB_OUTPUT
          else
            MAJOR_MINOR=$(echo $VERSION | cut -d. -f1,2)
            PATCH=$(echo $VERSION | cut -d. -f3)
            NEW_PATCH=$((PATCH + 1))
            echo "version=$MAJOR_MINOR.$NEW_PATCH" >> $GITHUB_OUTPUT
          fi
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Build container image
        run: |
          chmod +x gradlew
          ./gradlew bootBuildImage \
            --imageName ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}
      - name: OCI image vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}
          fail-build: false
          severity-cutoff: high
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Log into container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish container image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.version }}